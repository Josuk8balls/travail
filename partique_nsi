# Maximum
  def maximum(nombres):
      if len(nombres)==0:
          return 0
      maxi = nombres[0]
      for i in range(1, len(nombres)):
          if nombres[i]>maxi:
              maxi = nombres[i]
      return maxi
  
  # test
  assert maximum([98, 12, 104, 23, 131, 9]) == 131
  assert maximum([-27, 24, -3, 15]) == 24



# Indice première occurence
  def indice(element, tableau):
     for i in range(len(tableau)):
          if element == tableau[i]:
              return i
 
 # test
  assert indice(1, [10, 12, 1, 56]) == 2
  assert indice(1, [1, 50, 1]) == 0
  assert indice(15, [8, 9, 10, 15]) == 3
  assert indice(1, [2, 3, 4]) is None



# Dénivelé positif
  def denivele_positif(altitudes):
    denivele = 0
    som = 0
    next_som = 1
    for i in range (0,len(altitudes)-1):
        if altitudes[som] < altitudes[next_som]:
            denivele += altitudes[next_som] - altitudes[som]
        som += 1
        next_som += 1
    return denivele

  # tests
  assert denivele_positif([330, 490, 380, 610, 780, 550]) == 560
  assert denivele_positif([200, 300, 100]) == 100
  
  

# Dernière occurence
  def derniere_occurrence(tableau, cible):
    occ = 0
    if cible not in tableau:
        return len(tableau)
    else:
        for i in range(0, len(tableau)):
            if cible == tableau[i]:
                occ = i 
        return occ

  # tests
  assert derniere_occurrence([5, 3], 1) == 2
  assert derniere_occurrence([2, 4], 2) == 0
  assert derniere_occurrence([2, 3, 5, 2, 4], 2) == 3
  
  
#Moyenne simple
STOP IT 
GET SOME HELP


#Recherche d'indices
  def indices(element, entiers):
      indice = []
      for i in range(len(entiers)):
          if element == entiers[i] :
              indice.append(i)
      return indice

  # tests
  assert indices(3, [3, 2, 1, 3, 2, 1]) == [0, 3]
  assert indices(4, [1, 2, 3]) == []
  assert indices(1, [1, 1, 1, 1]) == [0, 1, 2, 3]
  assert indices(5, [0, 0, 5]) == [2]



#Soleil couchant
   def nb_batiments_eclaires(hauteurs):
      bat = []
      ment = 0
      for i in range(len(hauteurs)):
          if hauteurs[i] > ment:
              ment = hauteurs[i]
              bat.append(ment)
      return len(bat)


  # tests
  assert 4 == nb_batiments_eclaires([2, 1, 2, 4, 0, 4, 5, 3, 5, 6])
  assert 1 == nb_batiments_eclaires([0, 3, 1, 2])
  
  
  
#Premier minimim local
  def indice_arret(hauteurs):
    trou = hauteurs[0]
    holl = 0
    for i in range(1,len(hauteurs)):
        if trou >= hauteurs[i]:
            trou = hauteurs[i]
            holl += 1
    return holl
    
  # Tests
  hauteurs = [3, 2, 5]
  assert indice_arret(hauteurs) == 1

  hauteurs = [3, 5]
  assert indice_arret(hauteurs) == 0

  hauteurs = [10, 8, 7, 5, 5, 4, 3, 6, 6, 5, 4, 12]
  assert indice_arret(hauteurs) == 6
  


# Nombres puis double
  def nombres_puis_double(valeurs):
      double = []
      for i in range(1,len(valeurs)):
          if valeurs[i] == valeurs[i-1] * 2:
              double.append((valeurs[i-1],valeurs[i]))
      return double

  # tests
  assert nombres_puis_double([1, 4, 2, 5]) == []
  assert nombres_puis_double([1, 3, 6, 7]) == [(3, 6)]
  assert nombres_puis_double([7, 1, 2, 5, 3, 6]) == [(1, 2), (3, 6)]
  assert nombres_puis_double(
      [5, 1, 2, 4, 8, -5, -10, 7]) == [(1, 2), (2, 4), (4, 8), (-5, -10)]
